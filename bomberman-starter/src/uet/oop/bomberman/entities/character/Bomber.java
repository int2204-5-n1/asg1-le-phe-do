package uet.oop.bomberman.entities.character;

import uet.oop.bomberman.Board;
import uet.oop.bomberman.Game;
import uet.oop.bomberman.entities.Entity;
import uet.oop.bomberman.entities.bomb.Bomb;
import uet.oop.bomberman.graphics.Screen;
import uet.oop.bomberman.graphics.Sprite;
import uet.oop.bomberman.input.Keyboard;

import java.util.Iterator;
import java.util.List;
import uet.oop.bomberman.Board;
import uet.oop.bomberman.entities.character.enemy.Enemy;
import uet.oop.bomberman.entities.tile.Grass;
import uet.oop.bomberman.entities.tile.Tile;
import uet.oop.bomberman.entities.tile.Wall;
import uet.oop.bomberman.entities.tile.destroyable.Brick;
import uet.oop.bomberman.level.Coordinates;
import uet.oop.bomberman.level.FileLevelLoader;
import uet.oop.bomberman.level.LevelLoader;
public class Bomber extends Character {

    private List<Bomb> _bombs;
    protected Keyboard _input;

    /**
     * náº¿u giÃ¡ trá»‹ nÃ y < 0 thÃ¬ cho phÃ©p Ä‘áº·t Ä‘á»‘i tÆ°á»£ng Bomb tiáº¿p theo,
     * cá»© má»—i láº§n Ä‘áº·t 1 Bomb má»›i, giÃ¡ trá»‹ nÃ y sáº½ Ä‘Æ°á»£c reset vá»? 0 vÃ  giáº£m dáº§n trong má»—i láº§n update()
     */
    protected int _timeBetweenPutBombs = 0;

    public Bomber(int x, int y, Board board) {
        super(x, y, board);
        _bombs = _board.getBombs();
        _input = _board.getInput();
        _sprite = Sprite.player_right;
    }

    @Override
    public void update() {
        clearBombs();
        if (!_alive) {
            afterKill();
            return;
        }

        if (_timeBetweenPutBombs < -7500) _timeBetweenPutBombs = 0;
        else _timeBetweenPutBombs--;

        animate();

        calculateMove();

        detectPlaceBomb();
    }

    @Override
    public void render(Screen screen) {
        calculateXOffset();

        if (_alive)
            chooseSprite();
        else
            _sprite = Sprite.player_dead1;

        screen.renderEntity((int) _x, (int) _y - _sprite.SIZE, this);
    }

    public void calculateXOffset() {
        int xScroll = Screen.calculateXOffset(_board, this);
        Screen.setOffset(xScroll, 0);
    }

    /**
     * Kiá»ƒm tra xem cÃ³ Ä‘áº·t Ä‘Æ°á»£c bom hay khÃ´ng? náº¿u cÃ³ thÃ¬ Ä‘áº·t bom táº¡i vá»‹ trÃ­ hiá»‡n táº¡i cá»§a Bomber
     */
    private void detectPlaceBomb() {
        // TODO: kiá»ƒm tra xem phÃ­m Ä‘iá»?u khiá»ƒn Ä‘áº·t bom cÃ³ Ä‘Æ°á»£c gÃµ vÃ  giÃ¡ trá»‹ _timeBetweenPutBombs, Game.getBombRate() cÃ³ thá»?a mÃ£n hay khÃ´ng
        // TODO:  Game.getBombRate() sáº½ tráº£ vá»? sá»‘ lÆ°á»£ng bom cÃ³ thá»ƒ Ä‘áº·t liÃªn tiáº¿p táº¡i thá»?i Ä‘iá»ƒm hiá»‡n táº¡i
        // TODO: _timeBetweenPutBombs dÃ¹ng Ä‘á»ƒ ngÄƒn cháº·n Bomber Ä‘áº·t 2 Bomb cÃ¹ng táº¡i 1 vá»‹ trÃ­ trong 1 khoáº£ng thá»?i gian quÃ¡ ngáº¯n
        // TODO: náº¿u 3 Ä‘iá»?u kiá»‡n trÃªn thá»?a mÃ£n thÃ¬ thá»±c hiá»‡n Ä‘áº·t bom báº±ng placeBomb()
        // TODO: sau khi Ä‘áº·t, nhá»› giáº£m sá»‘ lÆ°á»£ng Bomb Rate vÃ  reset _timeBetweenPutBombs vá»? 0
    }

    protected void placeBomb(int x, int y) {
        // TODO: thá»±c hiá»‡n táº¡o Ä‘á»‘i tÆ°á»£ng bom, Ä‘áº·t vÃ o vá»‹ trÃ­ (x, y)
    }

    private void clearBombs() {
        Iterator<Bomb> bs = _bombs.iterator();

        Bomb b;
        while (bs.hasNext()) {
            b = bs.next();
            if (b.isRemoved()) {
                bs.remove();
                Game.addBombRate(1);
            }
        }

    }

    @Override
    public void kill() {
        if (!_alive) return;
        _alive = false;
    }

    @Override
    protected void afterKill() {
        if (_timeAfter > 0) --_timeAfter;
        else {
            _board.endGame();
        }
    }

    @Override
    protected void calculateMove() {
        double x1 = Game.getBomberSpeed();
        if(_input.down){
          // _y = _y - x1;
          move(_x,_y+x1);
        }
        else if(_input.up){
           // _y = _y  + x1;
           move(_x,_y-x1);
        }
        else if(_input.left){
           // _x = _x -x1;
           move(_x-x1,_y);
        }
        else if(_input.right){
          //  _x = _x +x1;
          move(_x+x1,_y);
        }
        
        // TODO: xá»­ lÃ½ nháº­n tÃ­n hiá»‡u Ä‘iá»?u khiá»ƒn hÆ°á»›ng Ä‘i tá»« _input vÃ  gá»?i move() Ä‘á»ƒ thá»±c hiá»‡n di chuyá»ƒn
        // TODO: nhá»› cáº­p nháº­t láº¡i giÃ¡ trá»‹ cá»? _moving khi thay Ä‘á»•i tráº¡ng thÃ¡i di chuyá»ƒn
    }

    @Override
    public boolean canMove(double x, double y) {
       
       //Entity e = _board.getEntity(x, y, this);
       
        Entity e = _board.getEntity(x,y, this);
       
        if(this.collide(e)==true) return false;
        
       
       
       return true;
    }

    @Override
    public void move(double xa, double ya) {
        if(canMove(xa,ya)){
        _x = xa;
        _y = ya;
        _moving = true;
        }
        else _moving = false;
       
        // TODO: sá»­ dá»¥ng canMove() Ä‘á»ƒ kiá»ƒm tra xem cÃ³ thá»ƒ di chuyá»ƒn tá»›i Ä‘iá»ƒm Ä‘Ã£ tÃ­nh toÃ¡n hay khÃ´ng vÃ  thá»±c hiá»‡n thay Ä‘á»•i tá»?a Ä‘á»™ _x, _y
        // TODO: nhá»› cáº­p nháº­t giÃ¡ trá»‹ _direction sau khi di chuyá»ƒn
    }

    @Override
    public boolean collide(Entity e) {
        // TODO: xá»­ lÃ½ va cháº¡m vá»›i Flame
        // TODO: xá»­ lÃ½ va cháº¡m vá»›i Enemy
//        System.out.println("("+e.getXTile()+","+e.getYTile()+")");
       //  System.out.println("("+this.getXTile()+","+this.getYTile()+")");
       // if(this.getX()/this.getSprite().SIZE==e.getX()&&this.getY()/this.getSprite().SIZE==e.getY()) return true;
     //  if(this.getXTile()==e.getXTile()&&this.getYTile()==e.getYTile()) return true;
        return false;
    }

    private void chooseSprite() {
        switch (_direction) {
            case 0:
                _sprite = Sprite.player_up;
                if (_moving) {
                    _sprite = Sprite.movingSprite(Sprite.player_up_1, Sprite.player_up_2, _animate, 20);
                }
                break;
            case 1:
                _sprite = Sprite.player_right;
                if (_moving) {
                    _sprite = Sprite.movingSprite(Sprite.player_right_1, Sprite.player_right_2, _animate, 20);
                }
                break;
            case 2:
                _sprite = Sprite.player_down;
                if (_moving) {
                    _sprite = Sprite.movingSprite(Sprite.player_down_1, Sprite.player_down_2, _animate, 20);
                }
                break;
            case 3:
                _sprite = Sprite.player_left;
                if (_moving) {
                    _sprite = Sprite.movingSprite(Sprite.player_left_1, Sprite.player_left_2, _animate, 20);
                }
                break;
            default:
                _sprite = Sprite.player_right;
                if (_moving) {
                    _sprite = Sprite.movingSprite(Sprite.player_right_1, Sprite.player_right_2, _animate, 20);
                }
                break;
        }
    }
}
